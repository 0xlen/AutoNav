#include <ros/ros.h>
#include <tf/transform_listener.h>
//#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Twist.h>
#include <tf/transform_datatypes.h>


int main(int argc, char** argv){
  ros::init(argc, argv, "my_tf_listener");

  ros::NodeHandle node;

  //ros::service::waitForService("spawn");
  //ros::ServiceClient add_turtle =
    //node.serviceClient<turtlesim::Spawn>("spawn");
  //turtlesim::Spawn srv;
  //add_turtle.call(srv);

  ros::Publisher drone_pose = node.advertise<geometry_msgs::Twist>("/pose", 100);
  ros::Publisher plot_pose = node.advertise<geometry_msgs::Twist>("/plotpose", 100);

  tf::TransformListener listener;

  ros::Rate rate(30.0);
  while (node.ok()){
    tf::StampedTransform transform;
    try{
      //ros::Time now = ros::Time::now();
      ros::Time now = ros::Time(0);
      listener.waitForTransform("/ORB_SLAM/World", "/ORB_SLAM/Camera", now, ros::Duration(3.0));
      listener.lookupTransform("/ORB_SLAM/World", "/ORB_SLAM/Camera", now, transform);
    }
    catch (tf::TransformException &ex) {
      ROS_ERROR("failure %s\n",ex.what());
      ros::Duration(1.0).sleep();
      continue;
    }

    
    //tf::Quaternion q(transform.getRotation().x(), (-1)*transform.getRotation().z(),transform.getRotation().y(),  transform.getRotation().w());
    //tf::Matrix3x3 m(q);
    //double roll, pitch, yaw;
    //m.getRPY(roll, pitch, yaw);
    
    geometry_msgs::Twist pose_msg;
    pose_msg.linear.x = transform.getOrigin().z();
    pose_msg.linear.y = transform.getOrigin().x()*(-1);
    pose_msg.linear.z = transform.getOrigin().y()*(-1);
    //pose_msg.angular.x = roll;
    //pose_msg.angular.y = pitch;
    //pose_msg.angular.z = yaw;
    
    /*
    geometry_msgs::PoseStamped pose_msg;
    pose_msg.pose.position.x = transform.getOrigin().z();
    pose_msg.pose.position.y = transform.getOrigin().x()*(-1);
    pose_msg.pose.position.z = transform.getOrigin().y()*(-1);
    */

    geometry_msgs::Twist plotpose_msg;
    plotpose_msg.linear.x = transform.getOrigin().z();
    plotpose_msg.linear.y = transform.getOrigin().x()*(-1);
    plotpose_msg.linear.z = transform.getOrigin().y()*(-1);
                                    
    drone_pose.publish(pose_msg);
    plot_pose.publish(plotpose_msg);

    rate.sleep();
  }
  return 0;
};

